<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Generated by ExamDiff Pro build 9.0.0.13 -->
<!-- saved from url=(0014)about:internet -->

<head>
<title>ExamDiff Pro Diff Report</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<style type="text/css">
body{background-color: #fff; font-family: Lucida Console, monospace; font-size: 13px; font-style: normal; font-weight: 400;}
table td, table th {padding: 0;}

#container{padding: 2px; border: 1px solid #333; border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; -khtml-border-radius: 5px;}
.pane{float: left; margin: 2px;}
#navigation{width: 100%; table-layout: fixed;}
.button{width: 30px;}
.button input{width: 100%;}
#currentDiff{width: 100%;}
.title{margin-bottom: 4px; padding: 2px; overflow: hidden; background-color: #eee; border: 1px solid #333; font-family: "Segoe UI", Helvetica, Arial, Verdana, sans-serif; font-size: 12px;}
.file{overflow: scroll; border: 1px solid #333;}
.panes{border-spacing: 0;}
.content{width: 100%;}
.content div{min-width: 100%;}
.header{background-color: #C0C0C0; height: 12px; border-bottom: 1px solid #666;}
.diffBar{vertical-align: top; width: 6px; min-width: 6px; border-right: 1px solid #666; background-color: #eee;}
.diffs{position: relative;}
.diff{position: absolute; left: -3px; min-width: 9px; background-color: #c0c0c0; border-top: 1px solid #666; border-bottom: 1px solid #666; border-right: 1px solid #666; }
.diff.active{background-color: yellow;}
.nums{float: left;}
.num{display: block; height: 13px; text-align: right; padding-left: 2px; padding-right: 4px; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}
#legend{height: 13px; clear: both; padding-top: 3px; padding-bottom: 4px; border-bottom: 1px solid #ccc;}
#legend #numDiffs{float: left; margin-left: 3px;}
#legend #colors{float: right; margin-left: 1em; margin-right: 3px;}
#legend #colors div{float: left; margin-right: 1em;}
#inspector{clear: both; border: 1px solid black; margin: 6px 2px; position: relative; top: 2px; overflow: auto; }
#inspector .line {padding: 1px; padding-bottom: 2px;}
#inspector .left.line {border-bottom: 1px solid black;}
#inspector .content div {width: 100%;}
#generated_by {background: #F4F8FF; text-align: right; font-size: 10px; font-family: Arial; color: #888; padding-top: 1px;}
#generated_by a {color: #888;}

.li, .la, .ld, .lc, .ln, .lo, .lg, .lh{position: relative; height: 13px; white-space:pre;}
.lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb{position: absolute; bottom: 0px; height: 1px; border-bottom: 1px solid #000;}
.lbin{white-space: pre; color: #000000; background-color: #FFFFFF;}
.li, .si{color: #000000; background-color: #FFFFFF; text-decoration: none;}
.la, .sa{color: #800000; background-color: #C0C0C0; text-decoration: none;}
.ld, .sd{color: #0000FF; background-color: #E0E0E0; text-decoration: none;}
.lc, .sc{color: #402000; background-color: #F2F2C6; text-decoration: none;}
.ln, .sn{color: #800080; background-color: #A6CAF0; text-decoration: none;}
.lo, .so{color: #FF0000; background-color: #C0DCC0; text-decoration: none;}
.lg, .sig{color: #008000; background-color: #F0F0F0; text-decoration: none;}
.sc2{color: #FF0F87; background-color: #E0E0E0; text-decoration: none;}
.lh{font-weight: 700; color: #3A33BC; display: inline-block; position: relative; white-space: nowrap;}
.lh:before{position: absolute; display:block; top:0; left:0; bottom:0; content: attr(data-content); background-color:#FFF; color:#FFF; z-index:-1; padding-right:.5em;}
.lh:after{position:absolute; content:''; display: block; left:0; right:0; top:50%; background-color:#3A33BC; height:1px; min-height:1px; z-index:-2;}

.directory .content div{padding-left: 3px;}
.directory .content span{margin-right: 3px;}
.directory .l{width: 2656px;}

.s1-90{color:#0000FF;background-color:#FFFFFF;}
.s1-89{color:#008000;background-color:#FFFFFF;}
.s1-86{color:#0000FF;background-color:#FFFFFF;}
.s1-88{color:#000000;background-color:#FFFFFF;}
.s1-87{color:#000000;background-color:#FFFFFF;}
.s1-85{color:#A31515;background-color:#FFFFFF;}
.s1-100{color:#ACA899;background-color:#FFFFFF;}
.s2-90{color:#0000FF;background-color:#FFFFFF;}
.s2-89{color:#008000;background-color:#FFFFFF;}
.s2-86{color:#0000FF;background-color:#FFFFFF;}
.s2-88{color:#000000;background-color:#FFFFFF;}
.s2-87{color:#000000;background-color:#FFFFFF;}
.s2-85{color:#A31515;background-color:#FFFFFF;}
.s2-100{color:#ACA899;background-color:#FFFFFF;}
.num{color:#808080;background-color:#F8F8F8;border-right-width:2px;border-right-style:groove;border-right-color:#E0E0E0;}

</style>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js">
    
</script>

<script type="text/javascript">
    var $mode = 'text';
    var $orientation = 'vertical';
    var $useLineInspector = true;
    var $lineHeight = 13;
    var $lineWidth = 2656
    var $scrollTimeout;
    var $diffs = [
null,
{d:'Diff 1: Change 1 line (104, first file) to 1 line (104, second file)',l:[103,103]},
{d:'Diff 2: Change 1 line (108, first file) to 1 line (108, second file)',l:[107,107]},
{d:'Diff 3: Change 1 line (237, first file) to 1 line (237, second file)',l:[236,236]},
{d:'Diff 4: Change 1 line (245, first file) to 1 line (245, second file)',l:[244,244]},
{d:'Diff 5: Change 3 lines (271 - 273, first file) to 6 lines (271 - 276, second file)',l:[270,275]}
];

    try {
        $(document).ready(function() {
            $(window).bind('load resize', fitToWindow);

            populateDiffs();
            registerEventHandlers();

            if ($useLineInspector) {
                $('#inspector').show();
                setLineInspector(0);
            }

            $(window).load(function () {
                firstDiff();
            });
        });
    } catch (e) {
        alert('This diff report did not load correctly, most likely due to lack of an Internet connection.\n\nIf you wish for ExamDiff Pro diff reports to be viewed on computers without Internet access, make sure to check the "Enable offline report viewing" option under Options | HTML.');
    }

    function isIE7() {
        return ($.browser.msie && parseInt($.browser.version) < 8);
    }

    function fitToWindow() {
        var containerWidth = $(window).width() - 23;
        var containerHeight = $(window).height() - 115 - ($useLineInspector ? (2 * $lineHeight + 13) : 0) - (isIE7() ? 7 : 0);

        if ($orientation == 'vertical') {
            var paneWidth = (containerWidth / 2) - 6;
            var paneHeight = containerHeight;
        } else {
            var paneWidth = containerWidth - 6;
            var paneHeight = ((containerHeight - 13) / 2) - 10;
        }

        $('#container').width(containerWidth);
        $('.title').width(paneWidth - 4);
        $('.file').width(paneWidth).height(paneHeight);

        if ($orientation == 'vertical') {
            var titleHeightMax = $('#title1').height();
            if ($('#title2').height() > titleHeightMax)
                titleHeightMax = $('#title2').height();
            $('#title1').height(titleHeightMax);
            $('#title2').height(titleHeightMax);
        }
    }

    function populateDiffs() {
        if ($diffs.length > 1) {
            var lineHeight = $lineHeight;
            if ($.browser.mozilla && $mode == 'binary') {
                lineHeight += 1; // don't know why Firefox behaves differently
            }

            for (var i = 1; i < $diffs.length; i++) {
                $('#currentDiff').append($('<option></option>').attr('value', i).text($diffs[i].d));
                $('.diffs').append($('<div class="diff"></div>')
                                 .attr('title', $diffs[i].d)
                         .css('top', ($diffs[i].l[0] * lineHeight) + 'px')
                         .height((($diffs[i].l[1] - $diffs[i].l[0] + 1) * lineHeight) - 1));
                $('.d' + i).attr('title', $diffs[i].d);
            }

            if ($mode == 'directory') {
                $('.diffs').css('margin-top', (lineHeight - 1) + 'px');
            }

            if (!isIE7()) {
                $('.diffBar').show(); // IE7 and below can't handle the diff bars
            }
            else {
                $('.li, .la, .ld, .lc, .ln, .lo, .lg, .lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb').css({ 'position': 'static' }); // IE7 and below can't handle 'relative'
            }
        } else {
            $('#currentDiff').append($('<option></option>').attr('value', 0).text('(No differences)'));
        }
    }

    function registerEventHandlers() {
        $('#currentDiff').bind('change keyup', function() {
            goto(currentDiff());
        });

        $('#file1').scroll(function (event) {
        	syncScroll(event);
        });
        $('#file2').scroll(function (event) {
        	syncScroll(event);
        });

        $('.file .l').click(function() {
            updateCurrentDiff(this);
            updateLineInspector(this);
        })

        $('#btnFirst').click(firstDiff);
        $('#btnPrevious').click(previousDiff);
        $('#btnNext').click(nextDiff);
        $('#btnLast').click(lastDiff);
    }

    function syncScroll(e) {
    	clearTimeout($scrollTimeout);

    	if (!e) e = window.event;
    	var $source = $(e.target);
    	var $target = ($source.attr('id') == 'file1') ? $('#file2') : $('#file1')

    	$target.off("scroll").scrollTop($source.scrollTop());
    	$target.off("scroll").scrollLeft($source.scrollLeft());

    	$scrollTimeout = setTimeout(function () {
    		$target.scroll(syncScroll);
    	}, 100, e);
    }

    function goto(diff) {
        if (diff > 0 && diff <= $diffs.length) {
            markCurrentDiff(diff);
            setLineInspector($diffs[diff].l[0]);

            if ($('.comparison .diffBar').css('display') != 'none') {
                var block = $('.diff').eq(diff - 1);
                var tableMidpoint = $('.file').height() / 2;

                if (block.height() > $('.pane').height()) {
                    // Scroll to the top of the diff block
                    $('.file').scrollTop(block.position().top - $lineHeight);
                } else {
                    // Scroll so that diff block is centered
                    var midpoint = block.position().top + (block.height() / 2);
                    $('.file').scrollTop(midpoint - tableMidpoint);
                }
            } else {
                // If diff bar's not shown, just scroll first diff line to top
                var scrollPos = $('.d' + diff).first().position().top - $('.l').first().position().top;
                if ($mode == 'directory') {
                    scrollPos += $lineHeight; // to account for header
                }
                $('.file').scrollTop(scrollPos);
            }
        }
    }

    function markCurrentDiff(diff) {
        $('#currentDiff').val(diff);

        $('.diff').removeClass('active');
        $('.comparison .diffs').each(function(i, diffBar) {
            $(diffBar).children().eq(diff - 1).addClass('active');
        });
    }

    function updateCurrentDiff(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        markCurrentDiff(closestDiffToLine(lineNum));
    }

    function updateLineInspector(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        setLineInspector(lineNum);
    }

    function setLineInspector(lineNum) {
        var leftLine = $($('#file1 .l').get(lineNum));
        var rightLine = $($('#file2 .l').get(lineNum));

        $('#inspectorLeftContent').html(leftLine.html())
        .attr('class', leftLine.attr('class'));
        $('#inspectorRightContent').html(rightLine.html())
        .attr('class', rightLine.attr('class'));

        if ($('.comparison .num').size() > 0) {
            var leftNum = $($('#file1 .num').get(lineNum));
            var rightNum = $($('#file2 .num').get(lineNum));
            var maxWidth = Math.max(leftNum.width(), rightNum.width());

            $('#inspector .left .num').html(leftNum.html())
            .width(maxWidth);
            $('#inspector .right .num').html(rightNum.html())
            .width(maxWidth);
        } else {
            $('#inspector .num').html('')
            .css('width', 0).css('border', 0).css('padding', 0);
        }
    }

    function closestDiffToLine(num) {
        var closest = {
            diff: null,
            dist: Infinity
        };

        for (var i = 1; i < $diffs.length; i++) {
            if ($diffs[i].l[0] <= num && $diffs[i].l[1] >= num) {
                closest = { diff: i, dist: 0 };
            } else {
                var dist = ($diffs[i].l[0] <= num) ? (num - $diffs[i].l[1]) : ($diffs[i].l[0] - num);
                if (dist <= closest.dist) {
                    closest = { diff: i, dist: dist };
                }
            }
        }

        return closest.diff;
    }

    function currentDiff() {
        return parseInt($('#currentDiff').val());
    }

    function firstDiff() {
        goto(1);
    }

    function previousDiff() {
        var diff = currentDiff();
        if (diff > 1) {
            diff--;
        }
        goto(diff);
    }

    function nextDiff() {
        var diff = currentDiff();
        if (diff < ($diffs.length - 1)) {
            diff++;
        }
        goto(diff);
    }

    function lastDiff() {
        goto($diffs.length - 1);
    }
</script>
</head>

<body>
<div id="container" style="">
    <!-- $JS_ONLY_BEGIN$ -->
        <table id="navigation">
            <tr>
                <td class="button"><input type="button" id="btnFirst" value="<<" title="First Difference"/></td>
                <td class="button"><input type="button" id="btnPrevious" value="<" title="Previous Difference"/></td>
                <td class="button"><input type="button" id="btnNext" value=">" title="Next Difference"/></td>
                <td class="button"><input type="button" id="btnLast" value=">>" title="Last Difference"/></td>
                <td>
                    <select id="currentDiff" size="1"></select>
                </td>
            </tr>
        </table>
    <!-- $JS_ONLY_END$ -->

    <div class="text comparison">
        <div class="pane">
            <div id="title1" class="title" style="width:px;" title="SaveData.cs"><b>SaveData.cs</b></div>
            <div id="file1" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">272 </div>
<div class="num">    </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>
<div class="num">289 </div>
<div class="num">290 </div>
<div class="num">291 </div>
<div class="num">292 </div>
<div class="num">293 </div>
<div class="num">294 </div>
<div class="num">295 </div>
<div class="num">296 </div>
<div class="num">297 </div>
<div class="num">298 </div>
<div class="num">299 </div>
<div class="num">300 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s1-86">#region UsingStatements</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Xml;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Xml.Serialization;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.IO;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-86">#endregion</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="s1-89">///     - Simple, flexible SaveData class for serializing many data types.</span></div>
<div class="l li"><span class="s1-89">///     - Only serializes public, non-static fields and classes.</span></div>
<div class="l li"><span class="s1-89">///     - Does not support serialization of classes derived from Component object (Transforms, Renderers, Monobehaviours, ect)</span></div>
<div class="l li"><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> SaveData</span></div>
<div class="l li"><span class="si">{</span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region PublicStaticReadonlyFields</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - The saved file's extension.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">readonly</span><span class="si"> </span><span class="s1-90">string</span><span class="si"> extension = </span><span class="s1-85">&quot;.uml&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region PublicFields</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - The name of the file.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">string</span><span class="si"> fileName = </span><span class="s1-85">&quot;SavedData&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Array used for serialization.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - XML requires serialized fields to be public. This will always be empty;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">string</span><span class="si">[] serializedTypes;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Array used for serialization.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - XML requires serialized fields to be public. This will always be empty.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> DataContainer[] serializedData;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region PublicParameters</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// Gets or sets the &lt;see cref=&quot;SaveData&quot;/&gt; with the specified key.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;param name='key'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Key to set.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> System.Object </span><span class="s1-90">this</span><span class="si">[</span><span class="s1-90">string</span><span class="si"> key]</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">get</span><span class="si"> { </span><span class="s1-90">return</span><span class="si"> _data[key]; }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">set</span><span class="si"> </span></div>
<div class="l li"><span class="si">        { </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(</span><span class="s1-90">typeof</span><span class="si">(Component).IsAssignableFrom(value.GetType())) </span><span class="s1-90">throw</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> System.InvalidOperationException(</span><span class="s1-85">&quot;Cannot serialize classes derived from Component!&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">            _data[key] = </span><span class="s1-90">value</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region PrivateFields</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Actual data storage.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">private</span><span class="si"> Dictionary&lt;</span><span class="s1-90">string</span><span class="si">, System.Object&gt; _data = </span><span class="s1-90">new</span><span class="si"> Dictionary&lt;</span><span class="s1-90">string</span><span class="si">, </span><span class="s1-90">object</span><span class="si">&gt;();</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region Constructors</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Initializes a new instance of the &lt;see cref=&quot;SaveData&quot;/&gt; class.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SaveData(){}</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Initializes a new instance of the &lt;see cref=&quot;SaveData&quot;/&gt; class.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;param name='fileName'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - The name of the saved file without any extension</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SaveData(</span><span class="s1-90">string</span><span class="si"> fileName)</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        this.fileName = fileName;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region PublicStaticFunctions</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Loads specified file from streaming assets folder.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;param name='fileName'&gt;</span></div>
<div class="l lc d1"><span class="sc">    ///     - The file to load from Application.</span><span class="sc2">streamingAssetsPath</span><span class="sc">.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> SaveData LoadFromStreamingAssets(</span><span class="s1-90">string</span><span class="si"> fileName)</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l lc d2"><span class="sc">        return Load(Application.</span><span class="sc2">streamingAssetsPath</span><span class="sc">+&quot;</span><span class="sc2">\</span><span class="sd">\</span><span class="sc">&quot;+fileName);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Loads a file from the specified path.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;param name='path'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - The path to load from.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;exception cref='System.InvalidOperationException'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Is thrown when the passed path does not exist or has the wrong extension.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/exception&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> SaveData Load(</span><span class="s1-90">string</span><span class="si"> path)</span></div>
<div class="l li"><span class="si">    {   </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(File.Exists(path) &amp;&amp; Path.GetExtension(path) == extension)</span></div>
<div class="l li"><span class="si">        {</span></div>
<div class="l li"><span class="si">            List&lt;System.Type&gt; additionalTypes = </span><span class="s1-90">new</span><span class="si"> List&lt;System.Type&gt;();</span></div>
<div class="l li"><span class="si">            XmlDocument document = </span><span class="s1-90">new</span><span class="si"> XmlDocument();</span></div>
<div class="l li"><span class="si">            document.Load(path);</span></div>
<div class="l li"><span class="si">            XmlNode objectNode = document.ChildNodes[1];</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">foreach</span><span class="si">(XmlNode node </span><span class="s1-90">in</span><span class="si"> objectNode[</span><span class="s1-85">&quot;serializedTypes&quot;</span><span class="si">].ChildNodes){</span></div>
<div class="l li"><span class="si">                additionalTypes.Add(System.Type.GetType(node.InnerXml));</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            XmlSerializer serializer = </span><span class="s1-90">new</span><span class="si"> XmlSerializer(</span><span class="s1-90">typeof</span><span class="si">(SaveData), additionalTypes.ToArray());</span></div>
<div class="l li"><span class="si">            TextReader textReader = </span><span class="s1-90">new</span><span class="si"> StreamReader(path);</span></div>
<div class="l li"><span class="si">            SaveData instance = (SaveData)serializer.Deserialize(textReader);</span></div>
<div class="l li"><span class="si">            textReader.Close(); </span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">foreach</span><span class="si">(DataContainer container </span><span class="s1-90">in</span><span class="si"> instance.serializedData){</span></div>
<div class="l li"><span class="si">                instance[container.key] = container.value;  </span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            instance.serializedData = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> instance;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">throw</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> System.InvalidOperationException(</span><span class="s1-85">&quot;File does not exist!&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion  </span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region PublicFunctions</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Determines whether this instance has the specified key.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - &lt;c&gt;true&lt;/c&gt; if this instance has the specified key; otherwise, &lt;c&gt;false&lt;/c&gt;.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;param name='key'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Key to check for.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> HasKey(</span><span class="s1-90">string</span><span class="si"> key)</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> _data.ContainsKey(key);  </span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Gets value associated with the key.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - The value.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;param name='key'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Key to get value of.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;typeparam name='T'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - The type of the returned value.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/typeparam&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> T GetValue&lt;T&gt;(</span><span class="s1-90">string</span><span class="si"> key)</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> (T)_data[key];</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Tries to get the value associated with the key.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - &lt;c&gt;true&lt;/c&gt; if the instance contains the key.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;param name='key'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Key to get value of.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;param name='result'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - If set to &lt;c&gt;true&lt;/c&gt;, the value associated with the key.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> TryGetValue(</span><span class="s1-90">string</span><span class="si"> key, </span><span class="s1-90">out</span><span class="si"> System.Object result)</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> _data.TryGetValue(key, </span><span class="s1-90">out</span><span class="si"> result);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Tries to get the value associated with the key.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - &lt;c&gt;true&lt;/c&gt; if the instance contains the key.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;param name='key'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Key to get value of.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;param name='result'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - If set to &lt;c&gt;true&lt;/c&gt;, the value associated with the key.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;typeparam name='T'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - The type of the returned value.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/typeparam&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> TryGetValue&lt;T&gt;(</span><span class="s1-90">string</span><span class="si"> key, </span><span class="s1-90">out</span><span class="si"> T result)</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        System.Object resultOut;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(_data.TryGetValue(key, </span><span class="s1-90">out</span><span class="si"> resultOut) &amp;&amp; resultOut.GetType() == </span><span class="s1-90">typeof</span><span class="si">(T))</span></div>
<div class="l li"><span class="si">        {</span></div>
<div class="l li"><span class="si">            result = (T)resultOut;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">else</span></div>
<div class="l li"><span class="si">        {</span></div>
<div class="l li"><span class="si">            result = </span><span class="s1-90">default</span><span class="si">(T);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Saves this instance to the Streaming Assets path.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l lc d3"><span class="sc">    public void Save() { Save(Application.</span><span class="sc2">streamingAssetsPath</span><span class="sc">+&quot;</span><span class="sc2">\</span><span class="sd">\</span><span class="sc">&quot;+fileName+extension); }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Saves this instance to the specified path.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;param name='path'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Path to save to.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/param&gt;</span></div>
<div class="l lc d4"><span class="sc">    public void Save(string path)</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        List&lt;System.Type&gt; additionalTypes = </span><span class="s1-90">new</span><span class="si"> List&lt;System.Type&gt;();</span></div>
<div class="l li"><span class="si">        List&lt;</span><span class="s1-90">string</span><span class="si">&gt; typeNameList = </span><span class="s1-90">new</span><span class="si"> List&lt;</span><span class="s1-90">string</span><span class="si">&gt;();</span></div>
<div class="l li"><span class="si">        List&lt;DataContainer&gt; dataList = </span><span class="s1-90">new</span><span class="si"> List&lt;DataContainer&gt;();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        System.Object result;</span></div>
<div class="l li"><span class="si">        System.Type resultType;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(</span><span class="s1-90">string</span><span class="si"> key </span><span class="s1-90">in</span><span class="si"> _data.Keys){</span></div>
<div class="l li"><span class="si">            result = _data[key];</span></div>
<div class="l li"><span class="si">            resultType = result.GetType();</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(!resultType.IsPrimitive &amp;&amp; !additionalTypes.Contains(resultType))</span></div>
<div class="l li"><span class="si">            {</span></div>
<div class="l li"><span class="si">                additionalTypes.Add(resultType);</span></div>
<div class="l li"><span class="si">                typeNameList.Add(resultType.AssemblyQualifiedName);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            dataList.Add(</span><span class="s1-90">new</span><span class="si"> DataContainer(key, result));</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        serializedData = dataList.ToArray();</span></div>
<div class="l li"><span class="si">        serializedTypes = typeNameList.ToArray();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        XmlSerializer serializer = </span><span class="s1-90">new</span><span class="si"> XmlSerializer(</span><span class="s1-90">typeof</span><span class="si">(SaveData), additionalTypes.ToArray());</span></div>
<div class="l lc d5"><span class="sc">        </span><span class="sc2">TextWriter textWriter</span><span class="sc"> = new StreamWriter(path);</span></div>
<div class="l lc d5"> </div>
<div class="l lc d5"> </div>
<div class="l lc d5"><span class="sc">        serializer.Serialize(</span><span class="sc2">textWriter</span><span class="sc">, this);</span></div>
<div class="l lc d5"> </div>
<div class="l lc d5"><span class="sc">        </span><span class="sc2">textWriter</span><span class="sc">.Close(); </span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        serializedData = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        serializedTypes = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region Utility</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///     - Serializable data container, used for saving and loading.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> DataContainer</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">string</span><span class="si"> key;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> System.Object </span><span class="s1-90">value</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> DataContainer(){}</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> DataContainer(</span><span class="s1-90">string</span><span class="si"> key, System.Object </span><span class="s1-90">value</span><span class="si">)</span></div>
<div class="l li"><span class="si">        {</span></div>
<div class="l li"><span class="si">            this.key = key;</span></div>
<div class="l li"><span class="si">            this.value = </span><span class="s1-90">value</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion</span></div>
<div class="l li"><span class="si">}</span></div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="pane">
            <div id="title2" class="title" style="width:px;" title="SaveData.cs"><b>SaveData.cs</b></div>
            <div id="file2" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>
<div class="num">289 </div>
<div class="num">290 </div>
<div class="num">291 </div>
<div class="num">292 </div>
<div class="num">293 </div>
<div class="num">294 </div>
<div class="num">295 </div>
<div class="num">296 </div>
<div class="num">297 </div>
<div class="num">298 </div>
<div class="num">299 </div>
<div class="num">300 </div>
<div class="num">301 </div>
<div class="num">302 </div>
<div class="num">303 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s2-86">#region UsingStatements</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Xml;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Xml.Serialization;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.IO;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-86">#endregion</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="s2-89">///     - Simple, flexible SaveData class for serializing many data types.</span></div>
<div class="l li"><span class="s2-89">///     - Only serializes public, non-static fields and classes.</span></div>
<div class="l li"><span class="s2-89">///     - Does not support serialization of classes derived from Component object (Transforms, Renderers, Monobehaviours, ect)</span></div>
<div class="l li"><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> SaveData</span></div>
<div class="l li"><span class="si">{</span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region PublicStaticReadonlyFields</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - The saved file's extension.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">readonly</span><span class="si"> </span><span class="s2-90">string</span><span class="si"> extension = </span><span class="s2-85">&quot;.uml&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region PublicFields</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - The name of the file.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">string</span><span class="si"> fileName = </span><span class="s2-85">&quot;SavedData&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Array used for serialization.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - XML requires serialized fields to be public. This will always be empty;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">string</span><span class="si">[] serializedTypes;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Array used for serialization.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - XML requires serialized fields to be public. This will always be empty.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> DataContainer[] serializedData;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region PublicParameters</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// Gets or sets the &lt;see cref=&quot;SaveData&quot;/&gt; with the specified key.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;param name='key'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Key to set.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> System.Object </span><span class="s2-90">this</span><span class="si">[</span><span class="s2-90">string</span><span class="si"> key]</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">get</span><span class="si"> { </span><span class="s2-90">return</span><span class="si"> _data[key]; }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">set</span><span class="si"> </span></div>
<div class="l li"><span class="si">        { </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(</span><span class="s2-90">typeof</span><span class="si">(Component).IsAssignableFrom(value.GetType())) </span><span class="s2-90">throw</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> System.InvalidOperationException(</span><span class="s2-85">&quot;Cannot serialize classes derived from Component!&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">            _data[key] = </span><span class="s2-90">value</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region PrivateFields</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Actual data storage.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">private</span><span class="si"> Dictionary&lt;</span><span class="s2-90">string</span><span class="si">, System.Object&gt; _data = </span><span class="s2-90">new</span><span class="si"> Dictionary&lt;</span><span class="s2-90">string</span><span class="si">, </span><span class="s2-90">object</span><span class="si">&gt;();</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region Constructors</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Initializes a new instance of the &lt;see cref=&quot;SaveData&quot;/&gt; class.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SaveData(){}</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Initializes a new instance of the &lt;see cref=&quot;SaveData&quot;/&gt; class.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;param name='fileName'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - The name of the saved file without any extension</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SaveData(</span><span class="s2-90">string</span><span class="si"> fileName)</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        this.fileName = fileName;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region PublicStaticFunctions</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Loads specified file from streaming assets folder.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;param name='fileName'&gt;</span></div>
<div class="l lc d1"><span class="sc">    ///     - The file to load from Application.</span><span class="sc2">persistentDataPath</span><span class="sc">.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> SaveData LoadFromStreamingAssets(</span><span class="s2-90">string</span><span class="si"> fileName)</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l lc d2"><span class="sc">        return Load(Application.</span><span class="sc2">persistentDataPath</span><span class="sc"> + &quot;</span><span class="sc2">/</span><span class="sc">&quot;+fileName);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Loads a file from the specified path.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;param name='path'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - The path to load from.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;exception cref='System.InvalidOperationException'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Is thrown when the passed path does not exist or has the wrong extension.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/exception&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> SaveData Load(</span><span class="s2-90">string</span><span class="si"> path)</span></div>
<div class="l li"><span class="si">    {   </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(File.Exists(path) &amp;&amp; Path.GetExtension(path) == extension)</span></div>
<div class="l li"><span class="si">        {</span></div>
<div class="l li"><span class="si">            List&lt;System.Type&gt; additionalTypes = </span><span class="s2-90">new</span><span class="si"> List&lt;System.Type&gt;();</span></div>
<div class="l li"><span class="si">            XmlDocument document = </span><span class="s2-90">new</span><span class="si"> XmlDocument();</span></div>
<div class="l li"><span class="si">            document.Load(path);</span></div>
<div class="l li"><span class="si">            XmlNode objectNode = document.ChildNodes[1];</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">foreach</span><span class="si">(XmlNode node </span><span class="s2-90">in</span><span class="si"> objectNode[</span><span class="s2-85">&quot;serializedTypes&quot;</span><span class="si">].ChildNodes){</span></div>
<div class="l li"><span class="si">                additionalTypes.Add(System.Type.GetType(node.InnerXml));</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            XmlSerializer serializer = </span><span class="s2-90">new</span><span class="si"> XmlSerializer(</span><span class="s2-90">typeof</span><span class="si">(SaveData), additionalTypes.ToArray());</span></div>
<div class="l li"><span class="si">            TextReader textReader = </span><span class="s2-90">new</span><span class="si"> StreamReader(path);</span></div>
<div class="l li"><span class="si">            SaveData instance = (SaveData)serializer.Deserialize(textReader);</span></div>
<div class="l li"><span class="si">            textReader.Close(); </span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">foreach</span><span class="si">(DataContainer container </span><span class="s2-90">in</span><span class="si"> instance.serializedData){</span></div>
<div class="l li"><span class="si">                instance[container.key] = container.value;  </span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            instance.serializedData = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> instance;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">throw</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> System.InvalidOperationException(</span><span class="s2-85">&quot;File does not exist!&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion  </span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region PublicFunctions</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Determines whether this instance has the specified key.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - &lt;c&gt;true&lt;/c&gt; if this instance has the specified key; otherwise, &lt;c&gt;false&lt;/c&gt;.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;param name='key'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Key to check for.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> HasKey(</span><span class="s2-90">string</span><span class="si"> key)</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> _data.ContainsKey(key);  </span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Gets value associated with the key.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - The value.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;param name='key'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Key to get value of.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;typeparam name='T'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - The type of the returned value.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/typeparam&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> T GetValue&lt;T&gt;(</span><span class="s2-90">string</span><span class="si"> key)</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> (T)_data[key];</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Tries to get the value associated with the key.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - &lt;c&gt;true&lt;/c&gt; if the instance contains the key.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;param name='key'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Key to get value of.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;param name='result'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - If set to &lt;c&gt;true&lt;/c&gt;, the value associated with the key.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> TryGetValue(</span><span class="s2-90">string</span><span class="si"> key, </span><span class="s2-90">out</span><span class="si"> System.Object result)</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> _data.TryGetValue(key, </span><span class="s2-90">out</span><span class="si"> result);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Tries to get the value associated with the key.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - &lt;c&gt;true&lt;/c&gt; if the instance contains the key.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;param name='key'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Key to get value of.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;param name='result'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - If set to &lt;c&gt;true&lt;/c&gt;, the value associated with the key.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;typeparam name='T'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - The type of the returned value.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/typeparam&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> TryGetValue&lt;T&gt;(</span><span class="s2-90">string</span><span class="si"> key, </span><span class="s2-90">out</span><span class="si"> T result)</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        System.Object resultOut;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(_data.TryGetValue(key, </span><span class="s2-90">out</span><span class="si"> resultOut) &amp;&amp; resultOut.GetType() == </span><span class="s2-90">typeof</span><span class="si">(T))</span></div>
<div class="l li"><span class="si">        {</span></div>
<div class="l li"><span class="si">            result = (T)resultOut;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">else</span></div>
<div class="l li"><span class="si">        {</span></div>
<div class="l li"><span class="si">            result = </span><span class="s2-90">default</span><span class="si">(T);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Saves this instance to the Streaming Assets path.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l lc d3"><span class="sc">    public void Save() { Save(Application.</span><span class="sc2">persistentDataPath</span><span class="sc"> + &quot;</span><span class="sc2">/</span><span class="sc">&quot;+fileName+extension</span><span class="sa">, System.Text.Encoding.UTF8</span><span class="sc">); }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Saves this instance to the specified path.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;param name='path'&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Path to save to.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/param&gt;</span></div>
<div class="l lc d4"><span class="sc">    public void Save(string path</span><span class="sa">, System.Text.Encoding encoding</span><span class="sc">)</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        List&lt;System.Type&gt; additionalTypes = </span><span class="s2-90">new</span><span class="si"> List&lt;System.Type&gt;();</span></div>
<div class="l li"><span class="si">        List&lt;</span><span class="s2-90">string</span><span class="si">&gt; typeNameList = </span><span class="s2-90">new</span><span class="si"> List&lt;</span><span class="s2-90">string</span><span class="si">&gt;();</span></div>
<div class="l li"><span class="si">        List&lt;DataContainer&gt; dataList = </span><span class="s2-90">new</span><span class="si"> List&lt;DataContainer&gt;();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        System.Object result;</span></div>
<div class="l li"><span class="si">        System.Type resultType;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(</span><span class="s2-90">string</span><span class="si"> key </span><span class="s2-90">in</span><span class="si"> _data.Keys){</span></div>
<div class="l li"><span class="si">            result = _data[key];</span></div>
<div class="l li"><span class="si">            resultType = result.GetType();</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(!resultType.IsPrimitive &amp;&amp; !additionalTypes.Contains(resultType))</span></div>
<div class="l li"><span class="si">            {</span></div>
<div class="l li"><span class="si">                additionalTypes.Add(resultType);</span></div>
<div class="l li"><span class="si">                typeNameList.Add(resultType.AssemblyQualifiedName);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            dataList.Add(</span><span class="s2-90">new</span><span class="si"> DataContainer(key, result));</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        serializedData = dataList.ToArray();</span></div>
<div class="l li"><span class="si">        serializedTypes = typeNameList.ToArray();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        XmlSerializer serializer = </span><span class="s2-90">new</span><span class="si"> XmlSerializer(</span><span class="s2-90">typeof</span><span class="si">(SaveData), additionalTypes.ToArray());</span></div>
<div class="l lc d5"><span class="sc">        </span><span class="sc2">StreamWriter writer</span><span class="sc"> = new StreamWriter(path</span><span class="sa">, false, encoding</span><span class="sc">);</span></div>
<div class="l lc d5"><span class="sc">        </span><span class="sa">using (writer)</span></div>
<div class="l lc d5"><span class="sc">        </span><span class="sa">{</span></div>
<div class="l lc d5"><span class="sc">            serializer.Serialize(</span><span class="sc2">writer</span><span class="sc">, this);</span></div>
<div class="l lc d5"><span class="sc">        </span><span class="sa">}</span><span class="sc">   </span></div>
<div class="l lc d5"><span class="sc">        </span><span class="sc2">writer</span><span class="sc">.Close(); </span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        serializedData = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        serializedTypes = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region Utility</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///     - Serializable data container, used for saving and loading.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> DataContainer</span></div>
<div class="l li"><span class="si">    {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">string</span><span class="si"> key;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> System.Object </span><span class="s2-90">value</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> DataContainer(){}</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> DataContainer(</span><span class="s2-90">string</span><span class="si"> key, System.Object </span><span class="s2-90">value</span><span class="si">)</span></div>
<div class="l li"><span class="si">        {</span></div>
<div class="l li"><span class="si">            this.key = key;</span></div>
<div class="l li"><span class="si">            this.value = </span><span class="s2-90">value</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion</span></div>
<div class="l li"><span class="si">}</span></div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div id="inspector" style="display: none;">
        <div class="left line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorLeftContent"></div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="right line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorRightContent"></div>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <div id="legend">
        <div id="numDiffs"><b>5 differences</b>: 10 lines, 16 inline differences in 10 changed lines</div><div id="colors"><div class="sa" title="Added lines: 0, inline additions in changed lines: 6">Added(0,6)</div><div class="sd" title="Deleted lines: 0, inline deletions in changed lines: 2">Deleted(0,2)</div><div class="sc" title="Changed lines: 10">Changed(10)</div><div class="sc2" title="Inline changes in changed lines: 8">Changed in changed(8)</div><div class="sig" title="Ignored lines and line parts">Ignored</div></div>
    </div>

    <div id="generated_by">
        Generated on April 17, 2017, 8:37 PM by <a href="http://www.prestosoft.com/edp_examdiffpro.asp?ref=diffreport" target="_blank">ExamDiff Pro</a> 9.0.0.13.
    </div>
</div>
</body>

</html>

